1、为什么要用git？
R: 能够从服务器上克隆数据库（包括代码和版本信息）到单机上。
   在自己的机器上创建分支，修改代码。
   在单机上自己创建的分支上提交代码。
   在单机上合并分支。
   新建一个分支，把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。

2、什么是指针？  
R: 指针是一个变量，是存放一个变量地址的变量，不同于其他类型变量，它是专门用来存放内存地址的，也称为地址变量。

3、数组的内存模型是什么？
R: 数组：是一种线性数据结构，用连续的内存空间，来存储相同类型的数据
   即当一个地址+1的时候，这个1的含义是根据这个地址的类型来确定的。
   int a[5];  a代表第一个元素的地址。它的类型为一个元素的地址。故a+1代表a[1].只往后移动了一个元素位置。

4、什么时候用数组，什么时候用链表？
R: 数组的优势：数组是将元素在内存中连续存放，可以迅速访问数组中任何元素。例如一个数组，a[i] 或者 *(a+i),a就是这个数组的首地址，a+i为数组偏移。
   数组的劣势：数组地址是连续，定义时，数组的长度就定了，后面不能改了。
   链表的优势：链表是一种动态数据结构，其中的元素在内存中不是顺序存储的，而是通过指针联系到一起，因此它可以在运行时通过分配和取消分配内存来增长和缩小，因此没有内存浪费。
   链表的劣势：每个结点包括两个部分：一个是存储数据元素 的数据域，另一个是存储下一个结点地址的指针，如果要访问链表中一个元素，需要从第一个元素始，一直找到需要的元素位置。
   链表中的元素或节点遍历很困难，访问元素的效率低。
   所以在知道同类数据的数量范围且不超过静态内存容许值时用数组，编程简单快速。
   当你处理的同类数据的数据量未知时zhi，或者数据量超过静态数组定义范围时，就要用链表。

5、什么是树？
R: 树是由一个集合以及在该集合上定义的一种关系构成的。
   集合中的元素称为树的结点，所定义的关系称为父子关系。
   父子关系在树的结点之间建立了一个层次结构。
   在这种层次结构中有一个结点具有特殊的地位,这个结点称为该树的根结点,或简称为树根。
   最经典的树是二叉树，每个节点最多有两个子节点。

6、什么是树的最佳状态？
R: 最佳二叉查找树，即平均查找长度最短的二叉查找树.它的结点构成上的特点是：除了最下一层可以不满外，其他各层都是充满了的。
   任何一个节点到它的任意两个叶子节点的长度之差不超过1。

7、树和链表各有什么优势？ 
R: 树和链表都能动态的插入和删除。
   链表的优点是构造非常简单，缺点是链表特别长的时候每次查找都要循环整个链表，要循环很多次。
   树的优点是数据量非常大的时候，查找特别快，查找次数为log2(N) N是节点数，log是对数函数,例如：log2(1024)=10，2的10次方是1024.
   树的缺点是构造非常复杂，特别是构造最佳二叉查找树。
   
   当插入删除频繁时用红黑树，特点是任何一个节点到它的任意两个叶子节点的长度之比不超过2，长的不能比短的大2倍。
   当查找频繁时用最佳二叉查找树，特点是任何一个节点到它的任意两个叶子节点的长度之差不超过1。
   红黑树调整比最佳二叉查找树快，但最佳二叉查找树的查找速度红黑树快。
      

8、什么是内存？
R：内存是计算机中重要的部件之一，它是外存与CPU进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大。内存(Memory)也被称为内存储器和主存储器，
   其作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。
	内存一定要和硬盘区分开来，内存是编程时候变量存在的位置，硬盘是平时放电影的位置。

9、多级指针的原理是什么？
R: 如果指针变量中保存的是另一个指针变量的地址，这样的指针变量称多级指针。

10、什么时候用多级指针？
R: int a=1；
   int* p; p=&a;   p是int型指针，指向一个int变量 a，通过一次间接寻址运算，可以拿到这个int的值，就是*p，所以p是一级指针。
   int** p1; p1=&p;  p1指向一个一级指针， *p1 拿到的是 p,还是一个指针，需要在进行一次间接寻址运算，**p1, 拿到的才是int 的值，也就是a的值。所以p1是二级指针。
   int*** p2; p2=&p1; *p2 拿到的是p1的存储的地址，**p2拿到的值p里头存储的地址， ***p2拿到的是p指向的整形数的值,也就是a的值。所以p2是三级指针。

11、什么是变量？
R：任何一个变量在内存中都有自己的位置,这个位置有一个地址，从这个位置开始之后的若干个字节被这个变量占用。1个字节8个位，每个位只能放0或1.
   变量名必须以字母，数字和下划线3种字符组成，且第一个字符必须为字母或下划线。

12、变量在内存中存在的位置有哪些？
R: 栈区（stack）——由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。
   堆区（heap）一般由程序员分配（如new、malloc）和释放（delete，free）,若程序员不释放,申请的变量永远都得不到释放，系统内存会耗尽。

13、变量的作用域和生命周期是什么？
R: 栈：其他非malloc申请的内存，作用域：局部可用 可以是一个函数也可以是{}以内的。生命周期：出了局部代码块就消失了。
   堆：用malloc申请的内存。作用域：全局可用。 生命周期：直到free。

14、为什么要用include来包含头文件？
R: 通过头文件来调用库功能。在很多场合,源代码不便(或不准)向用户公布,只要向用户提供头文件和二进制的库即可。
   用户只需要按照头文件中du的接口声明来调用库功能,而不必关心接口怎么实现的。编译器会从库中提zhi取相应的代码。
   C语言的头文件中包内括了各个标准库函数的函数原型，充分有效合理利用可以简化程序设计。
	
	include就是把要包含的头文件中的所有代码直接复制到自己的cpp中include所在的位置。
	使用include包含头文件是可以减少代码冗余，相同的头文件只要被写一次就可以被不同的cpp引用复制。
	后期改动头文件只需要改一次而不需要每一个cpp中都要改。
	多个cpp共用的声明代码，建议放到一个头文件中。然后通过include头文件来引用。

15、include的原理是什么？
R：头文件为相关声明提供了一个集中存在的位置，#include只接受一个参数：头文件名。
   头文件正确使用可以保证所有文件使用给定实体的同一声明；当声明需要修改时，只有头文件需要更新。
	
	include就是把要包含的头文件中的所有代码直接复制到自己的cpp中include所在的位置。

16、c和c++的区别是什么？
R: c: 面向过程的编程思想，主要是函数就是单纯用来做算法处理，从形参得到输入，从return，指针型形参的间址运算写操作，全局变量 可以返回计算结果。函数本身不能记下任何变量和计算结果。
   c++: 面向对象的编程思想，将函数方法和变量，捆绑在一个class内部，当声明一个class的对象时，这个对象的方法可以读写它的成员变量，相当于一个对象，既有算法，也有变量，
   不需要用户对大量的计算结果另外申请内存来保存。

17、什么是面向对象的编程思想？
R: 通过对象名进行变量和函数的名空间管理。

18、操作系统有那些？各自的优势是什么？
R: 操作系统有Windows和Linux。
   Windows最大的优势就是他的用户基础。
   Linux的优势是Linux是一个开放源代码的系统，任何人都能够得到它的源程序进行阅读、分析和修改。开放源码提高了软件的代码质量和安全性。

19、为什么要用CMake?主要原理是什么？
R：CMakeLists.txt是项目管理文件。用来组织头文件，cpp源文件，以及要调用的库文件，最终通过编译器，编译成二进制文件，电脑可以执行的。

20、集成开发环境有哪些？各自优点是什么？
R：visual studio: windows系统上的最好的软件开发工具，简称集成开发环境（integrated development environment，缩写IDE），目前最新版本是2019。
	qt creator:windows和Linux都有的集成开发环境。

21、什么是源代码？什么是编译器？什么是二进制？
R: 源代码是指原始代码,可以是任何语言代码,可以用文本编辑器打开看到英文字符。源代码就是指编写的最原始程序的代码。
   编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。
   一个现代编译器的主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 
   目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)高级计算机语言。
   二进制数据是用0和1两个数码来表示的数，它的基数为2,进位规则是“逢二进一”。

22、opencv是什么？ 怎么使用？主要用哪些类？
R： OpenCV是一个用于图像处理、分析、机器视觉方面的开源函数库。
   主要类型：固定向量类cv::Vec<> 、固定矩阵类cv::Matx<> 、cv::Point二维/三维点类 、cv::Scalar四维点类。

23、git常用操作有哪些？对应的指针有那些？
R：git init：初始化git仓库,目录下生成一个.git文件。
   git add 文件名：将文件修改添加到仓库。
   git commit -m "说明" 将文件提交到仓库
   git status：查看当前仓库的状态，掌握工作区的状态。
   git log:查看历史记录。
   git reset --hard HEAD^: 回退到上一个版本 HEAD表示当前版本，上一个是HEAD^,往上一百个是HEAD~100。
   git reset --hard commit.id: 回到指定版本号对应的版本。
   git remote add origin github仓库地址：将本地仓库与远程仓库关联。
   git push origin master: 将本地master分支的修改推送到远程仓库。
   git clone github仓库地址：将远程仓库克隆到本地。
   git branch two：创建two分支。
   git checkout two ：切换到two分支。
   git merge dev: 合并指定分支到当前分支。
   git branch -d two: 删除two分支。
   git branch -D two： 如果分支还没合并，使用-d无法删除，使用-D强制删除。
   git log --graph: 可以查看分支合并图。
   git pull:抓取最新的远程提交。

24、git的分支树用什么显示？
R：git就像上图所示的一个链表一样，每一个节点都有一个hash值，用来唯一标识这个commit(节点)。
   当我们commit了一次，会移动指向当前节点的指针，(这个指针就是分支branch)，每个节点保存了commit的内容，以及上一个节点的hash值。

   用Vs code 里头的git graph显示。

25、学英语有什么心得
R：先学语法规则再多记单词，翻译时先找到主干部分

26、英语长句子的翻译步骤有哪些？
R: 先找主干成分 主语、谓语、宾语、再找次要成 定语、状语、补语。

27、遇到问题一般怎么查？
R: 上百度和知乎遇到什么问题查什么问题。

28、画流程图用什么画？
R： 使用visio: 流程图，矢量图处理软件。

29、什么是计算机网络？
R： 计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，
   在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。

30、怎么翻墙？为什么要翻墙？
R: 用网络代理软件翻墙（proxy)。编程里面大量的英语最好是在google里面查。中国必须要翻墙才能查google。

31、什么是多线程？为什么要用多线程？
R: 在操作系统的上运行的程序，就是一个进程,一个进程中可以有多个线程，就相当于一个任务，分成好几个流水线处理，这几个流水线是并行的，可以分配到不同的处理器核上进行同步计算。

32、代码为什么要写注释？
R：注释为对代码的解释和说明,其目的是让人们能够更加轻松地了解代码。

33、为什么要内存管理？
R： 内存管理的概念就是，操作系统对内存的划分和动态分配。
   内存空间的分配与回收：由操作系统完成主存储器空间的分配和管理，使程序员摆脱存储分配的麻烦，提高编程效率。
   地址转换：在多道程序环境下，程序中的逻辑地址与内存中的物理地址不可能一致，因此存储管理必须提供地址转换功能，把逻辑地址转换成相应的物理地址。
   内存空间的扩充：利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存。
   存储保护：保证各道作业在各自的存储空间内运行，互不干扰。

34、heap和stack的区别？
R： heap是堆,stack是栈。
    堆：用malloc申请的内存。作用域：全局可用。 生命周期：直到free。
    栈：其他非malloc申请的内存，作用域：局部可用 可以是一个函数也可以是{}以内的。生命周期：出了局部代码块就消失了。

35、怎么在网上找面试总结？
R： 上百度和知乎。

36、为什么要有继承？
R：继承就是当你写一个类时,虽然这个类满足了某些功能但是你又想拓展它的功能,此时你就可以使用继承机制在写一个该类的子类,
   来完成你需要的功能,一旦子类继承了父类就拥有了父类的方法与域。

37、什么时候用多态？
R：存在一个继承体系结构。如果不存在继承体系结构，那么所谓的多态就无从谈起。
   在该继承体系结构中的所有类里面，均需要实现一个统一的函数接口，且该函数接口的行为在运行时才能确定这样的情形，就可以考虑使用多态。

38、模板类的原理是什么？
R： 当同样的功能代码，只是变量类型不一样时，例如不同节点数据类型的链表，不可能每次都实现一次同样的链表6大操作。那么一类型为参数的模块就出现了，模板类。
    和形参是一个道理，模板类的模板传递的就是不同数据类型。
